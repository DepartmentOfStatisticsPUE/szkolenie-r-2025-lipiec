---
title: "Szkolenie dzień drugi"
format: html
---

Tematy:

+ wczytanie danych z pliku na dysku

Wczytujemy dane z folderu Pobrane 

```{r}
gosp <- read.csv("~/Downloads/gospodarstwa1.csv")
```

Wczytujemy dane z projektu

```{r}
gosp <- read.csv2("../data-raw/gospodarstwa1.csv")
head(gosp)
```

+ wczytywanie danych z excela

Sprawdzamy czy dany pakiet istnieje

```{r}
library("readxlsx")
```
Jak możemy zainstalować dodatkowy pakiet

```{r}
install.packages("readxl") ## funkcja do instalacji pakietów
```

Instalacja pakietu openxlsx

```{r}
install.packages("openxlsx")
```

Ładujemy pakiet readxl

```{r}
library("readxl")
```

Wczytujemy dane z pliku XLSX

```{r}
gosp <- read_excel("../data-raw/gospodarstwa.xlsx", sheet = 1)
head(gosp)
```
```{r}
excel_sheets("../data-raw/gospodarstwa.xlsx")
```

Aby uniknąć sytuacji, w której mamy taką samą nazwę funkcji w dwóch róznych pakietach warto korzystać z następującej notacji: pakiet::funkcja

```{r}
gosp <- readxl::read_excel("../data-raw/gospodarstwa.xlsx", sheet = 1)
head(gosp)
```

Zadanie:

+ sprawdzić czy macie pakiet writexl
+ jak nie macie to zainstalujcie ten pakiet
+ nastepnie w dokumentacji znajdzcie funkcje do zapisu ramki danych do pliku xlsx
+ zapiszcie zbiór danych gosp do pliku "wynik.xlsx" do folderu "results"

```{r}
install.packages("writexl")
library(writexl)
write_xlsx(x = gosp, path = "../results/wynik.xlsx")
```


+ przetwarzanie danych z pakietem tidyverse

```{r}
install.packages("tidyverse")
```

```{r}
library(tidyverse)
```

Zacznijmy od funkcji select, która służy do wyboru kolumn

```{r}
select(gosp, klm) ## wybór kolumn i tworzona jest nowa ramka danych
gosp_podzbior <- select(gosp, klm, wydg) ## wybieramy kolumny i tworzymy nową ramkę danych
select(gosp, klm:zut) ## wybieram zakres kolumn
select(gosp, 1, 5, 10) ## mogę wybierac pozycyjnie
select(gosp, starts_with("d3")) ## kolumny rozpoczynające się od "d3"
select(gosp, matches("dochg|wydg")) ## kolumny, które mają dochg lub wydg w nazwach
select(gosp, -klm, -zut) -> nowy_zbior
select(gosp, wydatki=wydg, dochody=dochg) ## zmieniam nazwy kolumn
select(gosp, wydatki=wydg, dochody=dochg, klm:zut, 7) 
head(gosp)
```

Ćwiczenie:

W jednym select: 

+ wybrać kolumny z zakresu od los do wydg
+ wybrać kolumny zaczynajace się od d6
+ wybrac kolumny d345 i d347 i nadac im lepsze nazwy

```{r}
select(gosp, los:wydg, starts_with("d6"), gaz=d345, ogrzewanie=d347)
```
Wybieranie wierszy

```{r}
gosp[c(1,5,10),]
gosp[gosp$klm == 1,] ## 4,585 × 16
gosp[gosp$klm == 1 & gosp$wydg >= 10000, ] ## 62 × 16

subset(gosp, 1:10) ## error
subset(gosp, klm == 1) 
subset(gosp, klm == 1 & wydg >= 10000)

filter(gosp, klm == 1)
filter(gosp, klm == 1 & wydg >= 10000)
filter(gosp, klm == 1, wydg >= 10000)

filter(gosp, wydg >= median(wydg, na.rm=T)) ## usuwamy braki danych
filter(gosp, wydg >= median(wydg)) ## co będzie jak nie usuniemy?

filter(gosp, 1:10) ## to nie działa
slice(gosp, 1:10) ## to działa
```

Ćwiczenia:

+ wybrac gospodarstwa domowe z miast powyżej 200 tys. mieszkańców, którzy z wielką trudnością z aktualnym dochodem wiązali koniec z końcem 

```{r}
filter(gosp, klm <= 2, d63 == 1) ## 1449
filter(gosp, klm %in% 1:2, d63 == 1) 
filter(gosp, klm %in% c(1,2), d63 == 1) 
```

+ wybrać gospodarstwa których wydatki są wyższe niż 9 decyl dochódów (funkcja quantile)

```{r}
filter(gosp, wydg > quantile(dochg, 0.9, na.rm=T)) ## 2614
```

Tworzymy nowe kolumny z wykorzystaniem funkcji mutate (funkcja działa podobnie jak transform)

```{r}
mutate(gosp, 
       wydg_log = log(wydg),
       dochg_log = log(dochg+21250),
       wydg_dochg_rel = wydg_log/dochg_log)
```

Dodaję do zbioru średnie według grup

```{r}
mutate(gosp, 
       wydg_srednie=mean(wydg, na.rm=T), ## nowa kolumna
       .by=trb,
       .after=trb) ## według grup
```
Ćwiczenia z funkcją mutate

+ wstawić kolumnę z wartością "bez problemu" jeżeli ktoś wskazał w pytaniu d63 odpowidzi od "Raczej łatwo" do "Bardzo łatwo", a w przeciwnym wypadku "z pewnymi problemami" (podpowiedź: funkcja jeżeli)

+ utworzyć kolumnę przyjmującą wartość 1 gdy miejsce zamieszkania to miasto pow. 500 tys. mieszkańców z Wielkopolski, w przeciwnym wypadku 0

```{r}
mutate(gosp, 
       sytuacja = ifelse(d63 >= 4, "bez problemu", "z pewnymi problemami"),
       poznan = as.numeric(klm == 1 & woj == "30"),
       .before = "klm")
```

Tworzymy podsumowania danych z funkcją summarise / summarize

```{r}
summarise(gosp, 
          mediana = median(wydg, na.rm = TRUE),
          mean = mean(wydg, na.rm=TRUE),
          relacja = mediana/mean)

summarise(gosp, 
          mediana = median(wydg, na.rm = TRUE),
          mean = mean(wydg, na.rm=TRUE),
          .by = woj)

summarise(gosp, 
          mediana = median(wydg, na.rm = TRUE),
          mean = mean(wydg, na.rm=TRUE),
          relacja = mediana/mean,
          .by = c(woj, klm))
```

```{r}
summarise_at(gosp, 
             vars(wydg, dochg), 
             mean, na.rm=T)

summarise_at(gosp, 
             vars(wydg, dochg), 
             list(srednia = mean, 
                  mediana = median, 
                  odchyl = sd), na.rm=T)

summarise_at(gosp, 
             vars(matches("d6|wydg|dochg")), 
             list(srednia = mean, 
                  mediana = median, 
                  odchyl = sd), na.rm=T)
```

Ćwiczenie:

+ dla zmiennej wydg wyznacz kwartyl 1, medianę i kwartyl 3 według województw


```{r}
summarise(gosp,
          wydg_q1 = quantile(wydg, 0.25, na.rm=TRUE),
          wydg_q2 = quantile(wydg, 0.50, na.rm=TRUE),
          wydg_q3 = quantile(wydg, 0.75, na.rm=TRUE),
          .by = woj)
```
Korzystamy z funkcji group_by

```{r}
group_by(gosp, woj)

summarise(group_by(gosp, woj),
          wydg_q1 = quantile(wydg, 0.25, na.rm=TRUE),
          wydg_q2 = quantile(wydg, 0.50, na.rm=TRUE),
          wydg_q3 = quantile(wydg, 0.75, na.rm=TRUE))

summarise(group_by(gosp, region=woj, miejsce=klm),
          wydg_q1 = quantile(wydg, 0.25, na.rm=TRUE),
          wydg_q2 = quantile(wydg, 0.50, na.rm=TRUE),
          wydg_q3 = quantile(wydg, 0.75, na.rm=TRUE))
```


Potowkowe przetwarzanie danych

ctrl+shift+m
%>% magrittir
|>

```{r}
gosp |> 
  filter(klm == 1, woj == 30) |> 
  group_by(trb) |>
  summarise(mediana = median(wydg, na.rm = TRUE))
```


```{r}
read_excel("../data-raw/gospodarstwa.xlsx") |> 
  filter(klm == 1, woj == 30) |> 
  group_by(trb) |>
  summarise(mediana = median(wydg, na.rm = TRUE)) |>
  write_xlsx(path = "../results/wyniki1-tab.xlsx")

read_excel("../data-raw/gospodarstwa.xlsx") |> 
  filter(.data = _, klm == 1, woj == 30) 

read_excel("../data-raw/gospodarstwa.xlsx") %>%
  filter(.data = ., klm == 1, woj == 30) 
```

Ćwiczenie na potkowe przetwarzanie danych

na zborze gosp należy wykonać następujące działania:

+ [select] wybierz kolumny klm (zmien nazwę na miasto), woj (region), los (l_osob), wydg i dochg
+ [mutate] utwórz nową kolumnę poznan (na podstawie wczesniejszych warunków) i kolumnę relacja = wydg / dochg
+ [group_by] zgrupuj dane według l_osob i poznan
+ [summarise / summarise_at] podsumuj kolumny wydg, dochg i relacja używając średniej i mediany


```{r}
gosp |>
  select(miasto=klm, region=woj, l_osob=los, wydg, dochg) |>
  mutate(poznan = miasto == 1 & region == "30",
         relacja = wydg/dochg) |>
  group_by(l_osob, poznan) |>
  summarise_at(vars(wydg, dochg, relacja),
               list(sr=mean, median), na.rm=T)
```


